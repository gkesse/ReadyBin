#!/bin/bash
#================================================
GPWD=$PWD
#================================================
. $GPATH/.config
#================================================
lCheckIn="GPATH" ; if [ "${!lCheckIn}" = "" ] || ! [ -d "${!lCheckIn}" ] ; then echo $(gz_color s "$lCheckIn ?" yellow fg) ; exit ; fi 
#================================================
GGit_main() {
lArgSize="$#"
if [ "$lArgSize" = "0" ] ; then GGit_help "$@"
else GGit_process "$@" ; fi
}
#================================================
GGit_help() {
lScript=$(gz_string filename "$0")
GSCRIPT="\t\033[0;35m${lScript}\033[0m"
GCOMMENT="\033[0;33m%s\033[0m"
GHELP="$GSCRIPT : $GCOMMENT\n"
GREQUEST="\033[36m%s\033[0m"
GPROCESS="$GSCRIPT $GREQUEST : $GCOMMENT\n"
printf "\n"
printf "%s\n" "Description:"
printf "\t%s\n" "Operations sur les commandes git."
printf "\n"
printf "%s\n" "Utilisation:"
printf "$GHELP" "afficher aide"
printf "$GPROCESS" "tes" "tester module"
printf "$GPROCESS" "con_un" "configurer user name"
printf "$GPROCESS" "con_ue" "configurer user email"
printf "$GPROCESS" "con_ce" "configurer code editor"
printf "$GPROCESS" "con_l" "lister configurations"
printf "$GPROCESS" "con_a" "configurer tout"
printf "$GPROCESS" "git_pu" "git tirer modifications module"
printf "$GPROCESS" "git_pa" "git ajouter commiter pousser modifications module"
printf "\n"
}
#================================================
GGit_process() {
lArgSize="$#"
lArgCount=1
lRunFlag=0
while [ 1 ] ; do
if [ "$lArgCount" -gt "$lArgSize" ] ; then break ; fi
lKey=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
# tes
if [ "$lKey" = "test" ] ; then 
GGit_test ; lRunFlag=1 ; break
# con_un
elif [ "$lKey" = "con_un" ] ; then 
GGit_config_user_name ; lRunFlag=1 ; break
# con_ue
elif [ "$lKey" = "con_ue" ] ; then 
GGit_config_user_email; lRunFlag=1 ; break
# con_ce
elif [ "$lKey" = "con_ce" ] ; then 
GGit_config_code_editor ; lRunFlag=1 ; break
# con_a
elif [ "$lKey" = "con_a" ] ; then 
GGit_config_all ; lRunFlag=1 ; break
# con_l
elif [ "$lKey" = "con_l" ] ; then 
GGit_config_list ; lRunFlag=1 ; break
# git_pa
elif [ "$lKey" = "git_pa" ] ; then 
GGit_push_all ; lRunFlag=1 ; break
# git_pu
elif [ "$lKey" = "git_pu" ] ; then 
GGit_pull_all ; lRunFlag=1 ; break
#
fi
done
if [ "$lRunFlag" = "0" ] ; then GGit_help ; fi 
}
#================================================
GGit_test() {
echo "$FUNCNAME"
}
#================================================
GGit_config_user_name() {
local lUsername=$1
if [ "$lUsername" = "" ] ; then lUsername="Gerard KESSE" ; fi
git config --global user.name "$lUsername"
}
#================================================
GGit_config_user_email() {
local lUsermail=$1
if [ "$lUsermail" = "" ] ; then lUsermail="tiakagerard@hotmail.com" ; fi
git config --global user.email "$lUsermail"
}
#================================================
GGit_config_code_editor() {
local lEditor=$1
if [ "$lEditor" = "" ] ; then lEditor="nano" ; fi
git config --global core.editor "$lEditor"
}
#================================================
GGit_config_all() {
GGit_config_user_name
GGit_config_user_email
GGit_config_code_editor
}
#================================================
GGit_config_list() {
git config --list
}
#================================================
GGit_push_all() {
gz_bin git_pa
gz_c git_pu
gz_cpp git_pu
}
#================================================
GGit_pull_all() {
gz_bin git_pu
gz_c git_pu
gz_cpp git_pu
}
#================================================
GGit_main "$@"
#================================================
