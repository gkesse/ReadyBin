#!/bin/bash
#================================================
GPWD=$PWD
#================================================
GBIN_PATH=$(gz_config get GBIN_PATH)
GPATH=$(gz_config get GPATH)
#================================================
if [ "$GBIN_PATH" = "" ] || ! [ -d "$GBIN_PATH" ] ; then echo $(gz_color s "GBIN_PATH ?" yellow fg) ; exit ; fi 
if [ "$GPATH" = "" ] || ! [ -d "$GPATH" ] ; then echo $(gz_color s "GPATH ?" yellow fg) ; exit ; fi 
#================================================
GBin_main() {
lArgSize="$#"
if [ "$lArgSize" = "0" ] ; then GBin_help "$@"
else GBin_process "$@" ; fi
}
#================================================
GBin_help() {
lScript=$(gz_string filename "$0")
GSCRIPT="\t\033[0;35m${lScript}\033[0m"
GCOMMENT="\033[0;33m%s\033[0m"
GHELP="$GSCRIPT : $GCOMMENT\n"
GREQUEST="\033[36m%s\033[0m"
GPROCESS="$GSCRIPT $GREQUEST : $GCOMMENT\n"
printf "\n"
printf "%s\n" "Description:"
printf "\t%s\n" "Operations sur le dossier ReadyBin."
printf "\n"
printf "%s\n" "Utilisation:"
printf "$GHELP" "afficher aide"
printf "$GPROCESS" "git_s" "afficher status git"
printf "$GPROCESS" "git_a" "ajouter fichiers git"
printf "$GPROCESS" "git_c" "commiter modifications git"
printf "$GPROCESS" "git_p" "pousser modifications git"
printf "$GPROCESS" "git_pu" "tirer modifications git"
printf "$GPROCESS" "git_pa" "ajouter commiter valider modifications git"
printf "$GPROCESS" "git_sn" "initialiser nom utilisateur git"
printf "$GPROCESS" "git_se" "initialiser email utilisateur git"
printf "$GPROCESS" "git_ls" "lister config git"
printf "$GPROCESS" "set_p" "initialiser chemin"
printf "$GPROCESS" "get_p" "lire chemin"
printf "$GPROCESS" "c" "autoriser permission fichiers"
printf "$GPROCESS" "n <file_in>" "creer fichier nano"
printf "\n"
}
#================================================
GBin_process() {
lArgSize="$#"
lArgCount=1
lRunFlag=0
while [ 1 ] ; do
if [ "$lArgCount" -gt "$lArgSize" ] ; then break ; fi
lKey=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
# git_s
if [ "$lKey" = "git_s" ] ; then 
GBin_git_status ; lRunFlag=1
# git_a
elif [ "$lKey" = "git_a" ] ; then 
GBin_git_add_all ; lRunFlag=1
# git_c
elif [ "$lKey" = "git_c" ] ; then 
GBin_git_commit ; lRunFlag=1
# git_p
elif [ "$lKey" = "git_p" ] ; then 
GBin_git_push ; lRunFlag=1
# git_pa
elif [ "$lKey" = "git_pa" ] ; then 
GBin_git_push_all ; lRunFlag=1
# git_pu
elif [ "$lKey" = "git_pu" ] ; then 
GBin_git_pull ; lRunFlag=1
# git_sn
elif [ "$lKey" = "git_sn" ] ; then 
lUsername=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
GBin_git_set_user_name "$lUsername" ; lRunFlag=1
# git_se
elif [ "$lKey" = "git_se" ] ; then 
lEmail=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
GBin_git_set_user_email "$lEmail" ; lRunFlag=1
# git_ls
elif [ "$lKey" = "git_ls" ] ; then 
GBin_git_config_list ; lRunFlag=1
# set_p
elif [ "$lKey" = "set_p" ] ; then 
lPath=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
GBin_set_path "$lPath" ; lRunFlag=1
# get_p
elif [ "$lKey" = "get_p" ] ; then 
GBin_get_path ; lRunFlag=1
# chmod
elif [ "$lKey" = "chmod" ] ; then 
GBin_chmod ; lRunFlag=1
# copy
elif [ "$lKey" = "copy" ] ; then 
lFileIn=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
lFileOut=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
GBin_copy "$lFileIn" "$lFileOut" ; lRunFlag=1
# nano
elif [ "$lKey" = "nano" ] ; then 
lFile=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
GBin_nano_create_file "$lFile" ; lRunFlag=1
#
fi
done
if [ "$lRunFlag" = "0" ] ; then GBin_help ; fi 
}
#================================================
GBin_git_status() {
cd $GBIN_PATH
git status
cd $GPWD
}
#================================================
GBin_git_add_all() {
cd $GBIN_PATH
git add --all
cd $GPWD
}
#================================================
GBin_git_commit() {
cd $GBIN_PATH
git commit -m "Initial Commit"
cd $GPWD
}
#================================================
GBin_git_push() {
cd $GBIN_PATH
git push -u origin master
cd $GPWD
}
#================================================
GBin_git_push_all() {
cd $GBIN_PATH
git add --all
git commit -m "Initial Commit"
git push -u origin master
cd $GPWD
}
#================================================
GBin_git_pull() {
cd $GBIN_PATH
git pull
cd $GPWD
}
#================================================
GBin_git_set_user_name() {
local lUsername=$1
cd $GBIN_PATH
git config --global user.name "$lUsername"
cd $GPWD
}
#================================================
GBin_git_set_user_email() {
local lEmail=$1
cd $GBIN_PATH
git config --global user.email "$lEmail"
cd $GPWD
}
#================================================
GBin_git_config_list() {
local lEmail=$1
git config --list
cd $GPWD
}
#================================================
GBin_set_path() {
export GBIN_PATH=$1
}
#================================================
GBin_get_path() {
echo $GBIN_PATH
}
#================================================
GBin_chmod() {
chmod -R 777 $GBIN_PATH
}
#================================================
GBin_copy() {
local lFileIn=$1
local lFileOut=$2
cd $GPATH
cp -f $lFileIn $lFileOut
cd $GPWD
}
#================================================
GBin_nano_create_file() {
local lFile=$1
lPath=$GPATH/$lFile
nano $lPath
}
#================================================
GBin_main "$@"
#================================================
