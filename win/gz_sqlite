#!/bin/bash
#================================================
GPWD=$PWD
#================================================
GSQLITE_DB_PATH=$(gz_config get GSQLITE_DB_PATH)
#================================================
lCheckIn="GSQLITE_DB_PATH" ; if [ "${!lCheckIn}" = "" ] || ! [ -f "${!lCheckIn}" ] ; then echo $(gz_color s "$lCheckIn ?" yellow fg) ; exit ; fi 
#================================================
GSQLITE_DB_ROOT=$(gz_string dirname "$GSQLITE_DB_PATH")
GSQLITE_DB_NAME=$(gz_string filename "$GSQLITE_DB_PATH")
#================================================
GSQLite_main() {
lArgSize="$#"
if [ "$lArgSize" = "0" ] ; then GSQLite_help "$@"
else GSQLite_process "$@" ; fi
}
#================================================
GSQLite_help() {
lScript=$(gz_string filename "$0")
GSCRIPT="\t\033[0;35m${lScript}\033[0m"
GCOMMENT="\033[0;33m%s\033[0m"
GHELP="$GSCRIPT : $GCOMMENT\n"
GREQUEST="\033[36m%s\033[0m"
GPROCESS="$GSCRIPT $GREQUEST : $GCOMMENT\n"
printf "\n"
printf "%s\n" "Description:"
printf "\t%s\n" "Operations sur les commandes sqlite."
printf "\n"
printf "%s\n" "Utilisation:"
printf "$GHELP" "afficher aide"
printf "$GPROCESS" "query <sql_in>" "executer requete sql"
printf "$GPROCESS" "table_c <table_in>" "creer table"
printf "$GPROCESS" "table_d <table_in>" "supprimer table"
printf "$GPROCESS" "table_dl <table_in> <id_in>" "supprimer donnees table"
printf "$GPROCESS" "table_i <table_in> <data_in>" "inserer donnees table"
printf "$GPROCESS" "table_u <table_in> <id_in> <data_in>" "mise a jour donnees table"
printf "$GPROCESS" "table_s <table_in>" "selectionner donnees table"
printf "$GPROCESS" "table_si <table_in>" "selectionner donnees table id"
printf "$GPROCESS" "table_sl <table_in>" "selectionner donnees table limite"
printf "$GPROCESS" "show_t" "lister tables"
printf "$GPROCESS" "schema" "schema global"
printf "$GPROCESS" "set_r <path_in>" "initialiser racine"
printf "$GPROCESS" "set_n <name_in>" "initialiser nom base de donnees"
printf "$GPROCESS" "set_p <path_in>" "initialiser chemin"
printf "$GPROCESS" "get_p" "recuperer chemin"
printf "\n"
}
#================================================
GSQLite_process() {
lArgSize="$#"
lArgCount=1
lRunFlag=0
while [ 1 ] ; do
if [ "$lArgCount" -gt "$lArgSize" ] ; then break ; fi
lKey=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
# query
if [ "$lKey" = "query" ] ; then 
lQuery=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
GSQLite_query "$lQuery" ; lRunFlag=1
# table_c
elif [ "$lKey" = "table_c" ] ; then 
lTable=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
GSQLite_table_create "$lTable" ; lRunFlag=1
# table_d
elif [ "$lKey" = "table_d" ] ; then 
lTable=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
GSQLite_table_drop "$lTable" ; lRunFlag=1
# table_dl
elif [ "$lKey" = "table_dl" ] ; then 
lTable=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
lId=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
GSQLite_table_delete "$lTable" "$lId" ; lRunFlag=1
# table_i
elif [ "$lKey" = "table_i" ] ; then 
lTable=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
lRow=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
GSQLite_table_insert_default "$lTable" ; lRunFlag=1
# table_id
elif [ "$lKey" = "table_id" ] ; then 
lTable=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
GSQLite_table_insert_default "$lTable" ; lRunFlag=1
# table_s
elif [ "$lKey" = "table_s" ] ; then 
lTable=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
GSQLite_table_select "$lTable" ; lRunFlag=1
# table_si
elif [ "$lKey" = "table_si" ] ; then 
lTable=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
GSQLite_table_select_id "$lTable" ; lRunFlag=1
# table_sl
elif [ "$lKey" = "table_sl" ] ; then 
lTable=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
lLimit=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
GSQLite_table_select_limit "$lTable" "$lLimit" ; lRunFlag=1
# table_sc
elif [ "$lKey" = "table_sc" ] ; then 
lTable=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
GSQLite_table_schema "$lTable" ; lRunFlag=1
# table_u
elif [ "$lKey" = "table_u" ] ; then 
lTable=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
lId=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
lKey=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
lValue=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
GSQLite_table_update "$lTable" "$lId" "$lKey" "$lValue" ; lRunFlag=1
# show_t
elif [ "$lKey" = "show_t" ] ; then 
GSQLite_show_tables ; lRunFlag=1
# schema
elif [ "$lKey" = "schema" ] ; then 
GSQLite_schema ; lRunFlag=1
# clone_t
elif [ "$lKey" = "clone_t" ] ; then 
lTableIn=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
lTableOut=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
lColumn=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
GSQLite_clone_table "$lTableIn" "$lTableOut" "$lColumn" ; lRunFlag=1
# rename_t
elif [ "$lKey" = "rename_t" ] ; then 
lTableIn=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
lTableOut=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
GSQLite_rename_table "$lTableIn" "$lTableOut" ; lRunFlag=1
# drop_t
elif [ "$lKey" = "drop_t" ] ; then 
lTable=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
GSQLite_drop_table "$lTable" ; lRunFlag=1
# add_c 
elif [ "$lKey" = "add_c" ] ; then 
lTable=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
lColumn=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
GSQLite_add_column "$lTable" "$lColumn" ; lRunFlag=1
# drop_c
elif [ "$lKey" = "drop_c" ] ; then 
lTable=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
lColumn=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
GSQLite_drop_column "$lTable" "$lColumn" ; lRunFlag=1
# remove_c
elif [ "$lKey" = "remove_c" ] ; then 
lTable=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
lColumn=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
GSQLite_remove_column "$lTable" "$lColumn" ; lRunFlag=1
# alter_c
elif [ "$lKey" = "alter_c" ] ; then 
lTable=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
lColumn=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
GSQLite_alter_column "$lTable" "$lColumn" ; lRunFlag=1
# modify_c
elif [ "$lKey" = "modify_c" ] ; then 
lTable=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
lColumn=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
GSQLite_modify_column "$lTable" "$lColumn" ; lRunFlag=1
# list_c
elif [ "$lKey" = "list_c" ] ; then 
lTable=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
lRemove=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
GSQLite_list_column "$lTable" "$lRemove" ; lRunFlag=1
# set_r
elif [ "$lKey" = "set_r" ] ; then 
lPath=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
GSQLite_set_root "$lPath" ; lRunFlag=1
# set_n
elif [ "$lKey" = "set_n" ] ; then 
lName=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
GSQLite_set_name "$lName" ; lRunFlag=1
# set_p
elif [ "$lKey" = "set_p" ] ; then 
lPath=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
GSQLite_set_path "$lPath" ; lRunFlag=1
# get_p
elif [ "$lKey" = "get_p" ] ; then 
GSQLite_get_path ; lRunFlag=1
#
fi
done
if [ "$lRunFlag" = "0" ] ; then GSQLite_help ; fi
}
#================================================
GSQLite_query() {
local lQuery=$1
cd $GSQLITE_DB_ROOT
sqlite3 $GSQLITE_DB_NAME << _EOF_
$lQuery
.exit
_EOF_
cd $GPWD
}
#================================================
GSQLite_table_create() {
local lTable=$1
if [ "$lTable" = "" ] ; then gz_color s "table ?" yellow fg ; return ; fi
GSQLite_${lTable}_create
}
#================================================
GSQLite_users_create() {
GSQLite_query "
create table users(
id integer primary key autoincrement not null,
email text,
password text);"
}
#================================================
GSQLite_page_create() {
GSQLite_query "
create table page(
id integer primary key autoincrement not null,
name text,
meta_desc text,
meta_cano text);"
}
#================================================
GSQLite_table_drop() {
local lTable=$1
if [ "$lTable" = "" ] ; then gz_color s "table ?" yellow fg ; return ; fi
GSQLite_query "drop table $lTable;"
}
#================================================
GSQLite_table_insert() {
local lTable=$1
local lRow=$2
if [ "$lTable" = "" ] ; then gz_color s "table ?" yellow fg ; return ; fi
if [ "$lRow" = "" ] ; then gz_color s "row ?" yellow fg ; return ; fi
GSQLite_${lTable}_insert "$lRow"
}
#================================================
GSQLite_users_insert() {
local lRow=$1
lEmail=$(gz_string split "$lRow" "|" 1)
lPassword=$(gz_string split "$lRow" "|" 2)
lPassword=$(gz_md5 h "$lEmail|$lPassword")
lExist=$(GSQLite_users_email_exist "$lEmail")
if [ "$lExist" = "1" ] ; then gz_color s "cet email existe deja" yellow fg ; return ; fi
GSQLite_query "insert into users
(email,password) 
values ('$lEmail','$lPassword');"
}
#================================================
GSQLite_users_email_exist() {
local lEmail=$1
lResult=$(GSQLite_query "select exists(select 1 from users where email='$lEmail' limit 1);")
lExist=0
if [[ "$lResult" = *"1"* ]] ; then lExist=1 ; fi
echo "$lExist"
}
#================================================
GSQLite_table_insert_default() {
local lTable=$1
if [ "$lTable" = "" ] ; then gz_color s "table ?" yellow fg ; return ; fi
GSQLite_${lTable}_insert_default "$lRow"
}
#================================================
GSQLite_page_insert_default() {
GSQLite_query "insert into page
(name,meta_desc,meta_cano) 
values ('name','meta_desc','meta_cano');"
}
#================================================
GSQLite_users_insert_default() {
GSQLite_query "insert into users
(email,password) 
values ('email','password');"
}
#================================================
GSQLite_table_delete() {
local lTable=$1
local lId=$2
if [ "$lTable" = "" ] ; then gz_color s "id ?" yellow fg ; return ; fi
if [ "$lId" = "" ] ; then gz_color s "id ?" yellow fg ; return ; fi
GSQLite_query "delete from $lTable where id = $lId;"
}
#================================================
GSQLite_table_update() {
local lTable=$1
local lId=$2
local lKey=$3
local lValue=$4
if [ "$lTable" = "" ] ; then gz_color s "table ?" yellow fg ; return ; fi
if [ "$lId" = "" ] ; then gz_color s "id ?" yellow fg ; return ; fi
if [ "$lKey" = "" ] ; then gz_color s "key ?" yellow fg ; return ; fi
if [ "$lValue" = "" ] ; then gz_color s "value ?" yellow fg ; return ; fi
lFunction=$(declare -f GSQLite_${lTable}_${lKey}_update > /dev/null; echo $?)
if [ "$lFunction" = "0" ] ; then 
GSQLite_${lTable}_${lKey}_update "$lId" "$lValue"
else
GSQLite_query "update $lTable 
set $lKey = '$lValue'
where id = $lId;"
fi
}
#================================================
GSQLite_users_password_update() {
local lId=$1
local lPassword=$2
if [ "$lId" = "" ] ; then gz_color s "id ?" yellow fg ; return ; fi
if [ "$lPassword" = "" ] ; then gz_color s "password ?" yellow fg ; return ; fi
lEmail=$(GSQLite_query "select * from users where id = $lId;" | awk -F "|" '{print $2 ; exit}')
lPassword=$(gz_md5 h "$lEmail|$lPassword")
GSQLite_query "update users 
set password = '$lPassword'
where id = $lId;"
}
#================================================
GSQLite_table_select() {
local lTable=$1
if [ "$lTable" = "" ] ; then gz_color s "table ?" yellow fg ; return ; fi
GSQLite_query "select * from $lTable;"
}
#================================================
GSQLite_table_select_id() {
local lTable=$1
local lId=$2
if [ "$lTable" = "" ] ; then gz_color s "table ?" yellow fg ; return ; fi
if [ "$lId" = "" ] ; then gz_color s "id ?" yellow fg ; return ; fi
GSQLite_query "select * from $lTable where id = $lId;"
}
#================================================
GSQLite_table_select_limit() {
local lTable=$1
local lLimit=$2
if [ "$lTable" = "" ] ; then gz_color s "table ?" yellow fg ; return ; fi
if [ "$lLimit" = "" ] ; then gz_color s "limit ?" yellow fg ; return ; fi
GSQLite_query "select * from $lTable limit $lLimit;"
}
#================================================
GSQLite_table_schema() {
local lTable=$1
if [ "$lTable" = "" ] ; then gz_color s "table ?" yellow fg ; return ; fi
GSQLite_query ".schema $lTable"
}
#================================================
GSQLite_show_tables() {
GSQLite_query ".tables"
}
#================================================
GSQLite_schema() {
GSQLite_query ".schema"
}
#================================================
GSQLite_clone_table() {
local lTableIn=$1
local lTableOut=$2
local lColumn=$3
lQuery="create table $lTableOut AS select $lColumn from $lTableIn;"
GSQLite_query "$lQuery"
}
#================================================
GSQLite_rename_table() {
local lTableIn=$1
local lTableOut=$2
lQuery="alter table $lTableIn rename to $lTableOut;"
GSQLite_query "$lQuery"
}
#================================================
GSQLite_add_column() {
local lTable=$1
local lColumn=$2
lQuery="alter table $lTable add $lColumn;"
GSQLite_query "$lQuery"
}
#================================================
GSQLite_drop_column() {
local lTable=$1
local lColumn=$2
lQuery="alter table $lTable drop column $lColumn;"
GSQLite_query "$lQuery"
}
#================================================
GSQLite_remove_column() {
local lTable=$1
local lColumn=$2
lTableNew="${lTable}_new_clone"
lColumnNew=$(GSQLite_list_column "$lTable" "$lColumn")
GSQLite_clone_table "$lTable" "$lTableNew" "$lColumnNew"
GSQLite_drop_table "$lTable"
GSQLite_rename_table "$lTableNew" "$lTable"
}
#================================================
GSQLite_alter_column() {
local lTable=$1
local lColumn=$2
lQuery="alter table $lTable alter column $lColumn;"
GSQLite_query "$lQuery"
}
#================================================
GSQLite_modify_column() {
local lTable=$1
local lColumn=$2
lQuery="alter table $lTable modify column $lColumn;"
GSQLite_query "$lQuery"
}
#================================================
GSQLite_list_column() {
local lTable=$1
local lRemove=$2
lQuery="pragma table_info($lTable);"
GSQLite_query "$lQuery" | awk -F "|" -v lRemove="$lRemove" '
BEGIN {lFlag = 0}
{if($2 == lRemove) {next}
if(lFlag == 1) {printf(", ")}
lFlag = 1
printf("%s", $2)}'
}
#================================================
GSQLite_set_root() {
local lPath=$1 ; lPath=$(gz_cygwin c "$lPath")
export GSQLITE_DB_ROOT=$lPath
}
#================================================
GSQLite_set_name() {
export GSQLITE_DB_NAME=$1
}
#================================================
GSQLite_set_path() {
local lPath=$1
lRoot=$(gz_string dirname "$lPath")
lName=$(gz_string filename "$lPath")
GSQLite_set_root "$lRoot"
GSQLite_set_name "$lName"
}
#================================================
GSQLite_get_path() {
echo $GSQLITE_DB_PATH
}
#================================================
GSQLite_main "$@"
#================================================
