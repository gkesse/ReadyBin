#!/bin/bash
#================================================
GPWD=$PWD
#================================================
G_STATE="S_INIT"
#================================================
GCpp_Main() {
while [ 1 ] ; do
case "$G_STATE" in 
    "S_ADMIN") GCpp_ADMIN ;;
    "S_INIT") GCpp_INIT ;;
    "S_METHOD") GCpp_METHOD ;;
    "S_CHOICE") GCpp_CHOICE ;;
    #
    "S_CPP_COMPILE_CPP_PATH") GCpp_CPP_COMPILE_CPP_PATH ;;
    "S_CPP_COMPILE_CPP_NAME") GCpp_CPP_COMPILE_CPP_NAME ;;
    "S_CPP_COMPILE_CPP_COMPILO") GCpp_CPP_COMPILE_CPP_COMPILO ;;
    "S_CPP_COMPILE_CPP_TARGET") GCpp_CPP_COMPILE_CPP_TARGET ;;
    "S_CPP_COMPILE_CPP_ARGS") GCpp_CPP_COMPILE_CPP_ARGS ;;
    "S_CPP_COMPILE") GCpp_CPP_COMPILE ;;
    #
    "S_QT_COMPILE_QT_PATH") GCpp_QT_COMPILE_QT_PATH ;;
    "S_QT_COMPILE_QT_NAME") GCpp_QT_COMPILE_QT_NAME ;;
    "S_QT_COMPILE_QT_COMPILO") GCpp_QT_COMPILE_QT_COMPILO ;;
    "S_QT_COMPILE_QT_TARGET") GCpp_QT_COMPILE_QT_TARGET ;;
    "S_QT_COMPILE_QT_ARGS") GCpp_QT_COMPILE_QT_ARGS ;;
    "S_QT_COMPILE") GCpp_QT_COMPILE ;;
    #
    "S_SAVE") GCpp_SAVE ;;
    "S_LOAD") GCpp_LOAD ;;
    "S_QUIT") GCpp_QUIT ;;
    *) break ;;
esac    
done
}
#================================================
GCpp_ADMIN() {
gz_admin
G_STATE="S_END"
}
#================================================
GCpp_INIT() {
printf "\n"
printf "CPP !!!\n"
printf "\t%2s : %s\n" "-q" "quitter l'application"
printf "\t%2s : %s\n" "-i" "reinitialiser l'application"
printf "\t%2s : %s\n" "-a" "redemarrer l'administration"
printf "\t%2s : %s\n" "-v" "valider les configurations"
printf "\n"
G_STATE="S_LOAD"
}
#================================================
GCpp_METHOD() {
printf "CPP :\n"
printf "\t%2s : %s\n" "1" "compiler le projet"
printf "\n"
G_STATE="S_CHOICE"
}
#================================================
GCpp_CHOICE() {
read -p "CPP ($G_CPP_ID) ? " lAnswer
if [ "$lAnswer" = "" ] ; then lAnswer="$G_CPP_ID" ; fi
if [ "$lAnswer" = "-q" ] ; then G_STATE="S_END"
elif [ "$lAnswer" = "-i" ] ; then G_STATE="S_INIT" 
elif [ "$lAnswer" = "-a" ] ; then G_STATE="S_ADMIN"
#
elif [ "$lAnswer" = "1" ] ; then G_STATE="S_CPP_COMPILE_CPP_PATH" ; G_CPP_ID="$lAnswer"
elif [ "$lAnswer" = "2" ] ; then G_STATE="S_QT_COMPILE_QT_PATH" ; G_CPP_ID="$lAnswer"
fi
}
#================================================
GCpp_QT_COMPILE_QT_PATH() {
read -p "G_QT_PATH ($G_QT_PATH) ? " lAnswer
if [ "$lAnswer" = "" ] ; then lAnswer="$G_QT_PATH" ; fi
if [ "$lAnswer" = "-q" ] ; then G_STATE="S_END"
elif [ "$lAnswer" = "-i" ] ; then G_STATE="S_INIT" 
elif [ "$lAnswer" = "-a" ] ; then G_STATE="S_ADMIN"
elif [ "$lAnswer" = "-v" ] ; then G_STATE="S_QT_COMPILE"
elif [ "$lAnswer" != "" ] ; then G_STATE="S_QT_COMPILE_QT_NAME" ; G_QT_PATH="$lAnswer"
fi
}
#================================================
GCpp_QT_COMPILE_QT_NAME() {
read -p "G_QT_NAME ($G_QT_NAME) ? " lAnswer
if [ "$lAnswer" = "" ] ; then lAnswer="$G_QT_NAME" ; fi
if [ "$lAnswer" = "-q" ] ; then G_STATE="S_END"
elif [ "$lAnswer" = "-i" ] ; then G_STATE="S_INIT" 
elif [ "$lAnswer" = "-a" ] ; then G_STATE="S_ADMIN"
elif [ "$lAnswer" = "-v" ] ; then G_STATE="S_QT_COMPILE"
elif [ "$lAnswer" != "" ] ; then G_STATE="S_QT_COMPILE_QT_COMPILO" ; G_QT_NAME="$lAnswer"
fi
}
#================================================
GCpp_QT_COMPILE_QT_COMPILO() {
read -p "G_QT_COMPILO ($G_QT_COMPILO) ? " lAnswer
if [ "$lAnswer" = "" ] ; then lAnswer="$G_QT_COMPILO" ; fi
if [ "$lAnswer" = "-q" ] ; then G_STATE="S_END"
elif [ "$lAnswer" = "-i" ] ; then G_STATE="S_INIT" 
elif [ "$lAnswer" = "-a" ] ; then G_STATE="S_ADMIN"
elif [ "$lAnswer" = "-v" ] ; then G_STATE="S_QT_COMPILE"
elif [ "$lAnswer" != "" ] ; then G_STATE="S_QT_COMPILE_QT_TARGET" ; G_QT_COMPILO="$lAnswer"
fi
}
#================================================
GCpp_QT_COMPILE_QT_TARGET() {
read -p "G_QT_TARGET ($G_QT_TARGET) ? " lAnswer
if [ "$lAnswer" = "" ] ; then lAnswer="$G_QT_TARGET" ; fi
if [ "$lAnswer" = "-q" ] ; then G_STATE="S_END"
elif [ "$lAnswer" = "-i" ] ; then G_STATE="S_INIT" 
elif [ "$lAnswer" = "-a" ] ; then G_STATE="S_ADMIN"
elif [ "$lAnswer" = "-v" ] ; then G_STATE="S_QT_COMPILE"
elif [ "$lAnswer" != "" ] ; then G_STATE="S_QT_COMPILE_QT_ARGS" ; G_QT_TARGET="$lAnswer"
fi
}
#================================================
GCpp_QT_COMPILE_QT_ARGS() {
read -p "G_QT_ARGS ($G_QT_ARGS) ? " lAnswer
if [ "$lAnswer" = "" ] ; then lAnswer="$G_QT_ARGS" ; fi
if [ "$lAnswer" = "-q" ] ; then G_STATE="S_END"
elif [ "$lAnswer" = "-i" ] ; then G_STATE="S_INIT" 
elif [ "$lAnswer" = "-a" ] ; then G_STATE="S_ADMIN"
elif [ "$lAnswer" = "-v" ] ; then G_STATE="S_QT_COMPILE"
elif [ "$lAnswer" = "-z" ] ; then G_STATE="S_QT_COMPILE" ; G_QT_ARGS=""
elif [ "$lAnswer" != "" ] ; then G_STATE="S_QT_COMPILE" ; G_QT_ARGS="$lAnswer"
fi
}
#================================================
GCpp_QT_COMPILE() {
echo
lBuldPath="$G_CPP_PATH/$G_CPP_NAME/msys"
lMakefile="Makefile"
if [ "$G_CPP_COMPILO" != "" ] ; then lMakefile="${lMakefile}.$G_CPP_COMPILO" ; fi
cd $lBuldPath
make -f "$lMakefile" "$G_CPP_TARGET" GARGS="$G_CPP_ARGS"
G_STATE="S_SAVE"
}
#================================================
GCpp_CPP_COMPILE_CPP_PATH() {
read -p "G_CPP_PATH ($G_CPP_PATH) ? " lAnswer
if [ "$lAnswer" = "" ] ; then lAnswer="$G_CPP_PATH" ; fi
if [ "$lAnswer" = "-q" ] ; then G_STATE="S_END"
elif [ "$lAnswer" = "-i" ] ; then G_STATE="S_INIT" 
elif [ "$lAnswer" = "-a" ] ; then G_STATE="S_ADMIN"
elif [ "$lAnswer" = "-v" ] ; then G_STATE="S_CPP_COMPILE"
elif [ "$lAnswer" != "" ] ; then G_STATE="S_CPP_COMPILE_CPP_NAME" ; G_CPP_PATH="$lAnswer"
fi
}
#================================================
GCpp_CPP_COMPILE_CPP_NAME() {
read -p "G_CPP_NAME ($G_CPP_NAME) ? " lAnswer
if [ "$lAnswer" = "" ] ; then lAnswer="$G_CPP_NAME" ; fi
if [ "$lAnswer" = "-q" ] ; then G_STATE="S_END"
elif [ "$lAnswer" = "-i" ] ; then G_STATE="S_INIT" 
elif [ "$lAnswer" = "-a" ] ; then G_STATE="S_ADMIN"
elif [ "$lAnswer" = "-v" ] ; then G_STATE="S_CPP_COMPILE"
elif [ "$lAnswer" != "" ] ; then G_STATE="S_CPP_COMPILE_CPP_COMPILO" ; G_CPP_NAME="$lAnswer"
fi
}
#================================================
GCpp_CPP_COMPILE_CPP_COMPILO() {
read -p "G_CPP_COMPILO ($G_CPP_COMPILO) ? " lAnswer
if [ "$lAnswer" = "" ] ; then lAnswer="$G_CPP_COMPILO" ; fi
if [ "$lAnswer" = "-q" ] ; then G_STATE="S_END"
elif [ "$lAnswer" = "-i" ] ; then G_STATE="S_INIT" 
elif [ "$lAnswer" = "-a" ] ; then G_STATE="S_ADMIN"
elif [ "$lAnswer" = "-v" ] ; then G_STATE="S_CPP_COMPILE"
elif [ "$lAnswer" != "" ] ; then G_STATE="S_CPP_COMPILE_CPP_TARGET" ; G_CPP_COMPILO="$lAnswer"
fi
}
#================================================
GCpp_CPP_COMPILE_CPP_TARGET() {
read -p "G_CPP_TARGET ($G_CPP_TARGET) ? " lAnswer
if [ "$lAnswer" = "" ] ; then lAnswer="$G_CPP_TARGET" ; fi
if [ "$lAnswer" = "-q" ] ; then G_STATE="S_END"
elif [ "$lAnswer" = "-i" ] ; then G_STATE="S_INIT" 
elif [ "$lAnswer" = "-a" ] ; then G_STATE="S_ADMIN"
elif [ "$lAnswer" = "-v" ] ; then G_STATE="S_CPP_COMPILE"
elif [ "$lAnswer" != "" ] ; then G_STATE="S_CPP_COMPILE_CPP_ARGS" ; G_CPP_TARGET="$lAnswer"
fi
}
#================================================
GCpp_CPP_COMPILE_CPP_ARGS() {
read -p "G_CPP_ARGS ($G_CPP_ARGS) ? " lAnswer
if [ "$lAnswer" = "" ] ; then lAnswer="$G_CPP_ARGS" ; fi
if [ "$lAnswer" = "-q" ] ; then G_STATE="S_END"
elif [ "$lAnswer" = "-i" ] ; then G_STATE="S_INIT" 
elif [ "$lAnswer" = "-a" ] ; then G_STATE="S_ADMIN"
elif [ "$lAnswer" = "-v" ] ; then G_STATE="S_CPP_COMPILE"
elif [ "$lAnswer" = "-z" ] ; then G_STATE="S_CPP_COMPILE" ; G_CPP_ARGS=""
elif [ "$lAnswer" != "" ] ; then G_STATE="S_CPP_COMPILE" ; G_CPP_ARGS="$lAnswer"
fi
}
#================================================
GCpp_CPP_COMPILE() {
echo
lBuldPath="$G_CPP_PATH/$G_CPP_NAME/msys"
lMakefile="Makefile"
if [ "$G_CPP_COMPILO" != "" ] ; then lMakefile="${lMakefile}.$G_CPP_COMPILO" ; fi
cd $lBuldPath
make -f "$lMakefile" "$G_CPP_TARGET" GARGS="$G_CPP_ARGS"
G_STATE="S_SAVE"
}
#================================================
GCpp_SAVE() {
gz_process_in "config_save" "G_CPP_ID" "$G_CPP_ID"
gz_process_in "config_save" "G_CPP_PATH" "$G_CPP_PATH"
gz_process_in "config_save" "G_CPP_NAME" "$G_CPP_NAME"
gz_process_in "config_save" "G_CPP_COMPILO" "$G_CPP_COMPILO"
gz_process_in "config_save" "G_CPP_TARGET" "$G_CPP_TARGET"
gz_process_in "config_save" "G_CPP_ARGS" "$G_CPP_ARGS"
G_STATE="S_QUIT"
}
#================================================
GCpp_LOAD() {
G_CPP_ID=$(gz_process_in "config_load" "G_CPP_ID")
G_CPP_PATH=$(gz_process_in "config_load" "G_CPP_PATH")
G_CPP_NAME=$(gz_process_in "config_load" "G_CPP_NAME")
G_CPP_COMPILO=$(gz_process_in "config_load" "G_CPP_COMPILO")
G_CPP_TARGET=$(gz_process_in "config_load" "G_CPP_TARGET")
G_CPP_ARGS=$(gz_process_in "config_load" "G_CPP_ARGS")
G_STATE="S_METHOD"
}
#================================================
GCpp_QUIT() {
echo
read -p "QUIT_KO (Oui/[N]on) ? " lAnswer
if [ "$lAnswer" = "-q" ] ; then G_STATE="S_END"
elif [ "$lAnswer" = "-i" ] ; then G_STATE="S_INIT"
elif [ "$lAnswer" = "-a" ] ; then G_STATE="S_ADMIN"
elif [ "$lAnswer" = "o" ] ; then G_STATE="S_END"
elif [ "$lAnswer" = "n" ] ; then G_STATE="S_INIT"
elif [ "$lAnswer" = "" ] ; then G_STATE="S_INIT"
fi
}
#================================================
GCpp_Main
#================================================
cd $GPWD
#================================================
