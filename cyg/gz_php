#!/bin/bash
#================================================
GPWD=$PWD
#================================================
GPATH=$(gz_config get GPATH) ; . $GPATH/.config
#================================================
lCheckIn="GPATH" ; if [ "${!lCheckIn}" = "" ] || ! [ -d "${!lCheckIn}" ] ; then echo $(gz_color s "$lCheckIn ?" yellow fg) ; exit ; fi 
lCheckIn="GHTTPD_CONF" ; if [ "${!lCheckIn}" = "" ] || ! [ -f "${!lCheckIn}" ] ; then echo $(gz_color s "$lCheckIn ?" yellow fg) ; exit ; fi 
lCheckIn="GHTTPD_VHOSTS_CONF" ; if [ "${!lCheckIn}" = "" ] || ! [ -f "${!lCheckIn}" ] ; then echo $(gz_color s "$lCheckIn ?" yellow fg) ; exit ; fi 
lCheckIn="GWEB_ROOT" ; if [ "${!lCheckIn}" = "" ] ; then echo $(gz_color s "$lCheckIn ?" yellow fg) ; exit ; fi 
lCheckIn="GPHP_BIN" ; if [ "${!lCheckIn}" = "" ] || ! [ -f "${!lCheckIn}" ] ; then echo $(gz_color s "$lCheckIn ?" yellow fg) ; exit ; fi 
lCheckIn="GPHP_SCRIPT" ; if [ "${!lCheckIn}" = "" ] || ! [ -d "${!lCheckIn}" ] ; then echo $(gz_color s "$lCheckIn ?" yellow fg) ; exit ; fi 
lCheckIn="GPHP_FIREFOX" ; if [ "${!lCheckIn}" = "" ] || ! [ -f "${!lCheckIn}" ] ; then echo $(gz_color s "$lCheckIn ?" yellow fg) ; exit ; fi 
#================================================
export AWKPATH="$GPATH/awk"
#================================================
GPhp_main() {
lArgSize="$#"
if [ "$lArgSize" = "0" ] ; then GPhp_help "$@"
else GPhp_process "$@" ; fi
}
#================================================
GPhp_help() {
lScript=$(gz_string filename "$0")
GSCRIPT="\t\033[0;35m${lScript}\033[0m"
GCOMMENT="\033[0;33m%s\033[0m"
GHELP="$GSCRIPT : $GCOMMENT\n"
GREQUEST="\033[36m%s\033[0m"
GPROCESS="$GSCRIPT $GREQUEST : $GCOMMENT\n"
printf "\n"
printf "%s\n" "Description:"
printf "\t%s\n" "Operations sur les commandes php."
printf "\n"
printf "%s\n" "Utilisation:"
printf "$GHELP" "afficher aide"
printf "$GPROCESS" "add <port_in>" "ajouter port"
printf "$GPROCESS" "add_v <port_in> <webroot_in>" "ajouter virtual host"
printf "$GPROCESS" "rem <port_in>" "supprimer port"
printf "$GPROCESS" "rem_v <port_in>" "supprimer virtual port"
printf "$GPROCESS" "lis" "lister ports"
printf "$GPROCESS" "lis_v" "lister virtual host"
printf "$GPROCESS" "sho_v <port_in>" "afficher virtual host"
printf "$GPROCESS" "exe <script_in>" "executer script"
printf "$GPROCESS" "url <url_in>" "executer firefox"
printf "\n"
}
#================================================
GPhp_process() {
lArgSize="$#"
lArgCount=1
lRunFlag=0
while [ 1 ] ; do
if [ "$lArgCount" -gt "$lArgSize" ] ; then break ; fi
lKey=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
# test
if [ "$lKey" = "test" ] ; then 
GPhp_test ; lRunFlag=1
# ini
elif [ "$lKey" = "ini" ] ; then 
GPhp_listen_init ; lRunFlag=1
# add
elif [ "$lKey" = "add" ] ; then 
lPort=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
GPhp_listen_add "$lPort" ; lRunFlag=1
# add_v
elif [ "$lKey" = "add_v" ] ; then 
lPort=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
lWebRoot=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
GPhp_vhosts_add "$lPort" "$lWebRoot" ; lRunFlag=1
# rem
elif [ "$lKey" = "rem" ] ; then 
lPort=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
GPhp_listen_remove "$lPort" ; lRunFlag=1
# rem_v
elif [ "$lKey" = "rem_v" ] ; then 
lPort=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
GPhp_vhosts_remove "$lPort" ; lRunFlag=1
# lis
elif [ "$lKey" = "lis" ] ; then 
GPhp_listen_list ; lRunFlag=1
# lis_v
elif [ "$lKey" = "lis_v" ] ; then 
GPhp_vhosts_list ; lRunFlag=1
# sho_v
elif [ "$lKey" = "sho_v" ] ; then 
lPort=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
GPhp_vhosts_show "$lPort" ; lRunFlag=1
# exe
elif [ "$lKey" = "exe" ] ; then 
GPhp_script_exe "$@" ; lRunFlag=1 ; break
# url
elif [ "$lKey" = "url" ] ; then 
lUrl=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
GPhp_firefox_open_url "$lPort" ; lRunFlag=1
#
fi
done
if [ "$lRunFlag" = "0" ] ; then GPhp_help ; fi 
}
#================================================
GPhp_test() {
#GPhp_listen_list
#GPhp_listen_add 8877
#GPhp_listen_remove 80
#GPhp_vhosts_list
#GPhp_vhosts_show 80
#GPhp_vhosts_remove 8855
GPhp_vhosts_add 8866 ReadySQL
}
#================================================
GPhp_listen_init() {
awk '
@include "gk_string"
BEGIN {
lHeaderIndex = 0
lBodyIndex = 0
lFooterIndex = 0
lStatus = 1
lCount = 0
}{
lLine = $0
if(lLine != "") {
lLine = gk_string("trim", lLine) ; if(lLine != "") {lFirstChar = gk_string("get_c", lLine, 1) ; if(lFirstChar != "#") {
lListen = gk_string("split", lLine, " ", 1)
if(lListen == "Listen") {
lPort = gk_string("split", lLine, ":", 0)
lStatus = 2
}}}}
if(lStatus == 1) {lHeaderMap[lHeaderIndex++] = $0}
else if(lStatus == 2) {lStatus = 3}
else if(lStatus == 3) {lFooterMap[lFooterIndex++] = $0}
} END {
lPort = 80
lKey = lPort "_" 0 ; lListen = "Listen 0.0.0.0:" lPort ; lBodyKey[lBodyIndex++] = lKey ; lBodyMap[lKey] = lListen
lKey = lPort "_" 1 ; lListen = "Listen [::0]:" lPort ; lBodyKey[lBodyIndex++] = lKey ; lBodyMap[lKey] = lListen
lPort = 443
lKey = lPort "_" 0 ; lListen = "Listen 0.0.0.0:" lPort ; lBodyKey[lBodyIndex++] = lKey ; lBodyMap[lKey] = lListen
lKey = lPort "_" 1 ; lListen = "Listen [::0]:" lPort ; lBodyKey[lBodyIndex++] = lKey ; lBodyMap[lKey] = lListen

printf("") > FILENAME
for(lIndex in lHeaderMap) {
lLine = lHeaderMap[lIndex]
printf("%s\n", lLine) >> FILENAME}
for(lIndex in lBodyKey) {
lKey = lBodyKey[lIndex]
lLine = lBodyMap[lKey]
printf("%s\n", lLine) >> FILENAME}
for(lIndex in lFooterMap) {
lLine = lFooterMap[lIndex]
printf("%s\n", lLine) >> FILENAME}
}' $GHTTPD_CONF
}
#================================================
GPhp_listen_add() {
local lPortIn=$1
awk -v lPortIn="$lPortIn" '
@include "gk_string"
BEGIN {
lHeaderIndex = 0
lBodyIndex = 0
lFooterIndex = 0
lStatus = 1
lCount = 0
}{
lLine = $0
if(lLine != "") {
lLine = gk_string("trim", lLine)
if(lLine != "") {
lFirstChar = gk_string("get_c", lLine, 1)
if(lFirstChar != "#") {
lListen = gk_string("split", lLine, " ", 1)
if(lListen == "Listen") {
lPort = gk_string("split", lLine, ":", 0)
lStatus = 2
}}}}
if(lStatus == 1) {lHeaderMap[lHeaderIndex++] = $0}
else if(lStatus == 2) {
lKey = lPort "_" lCount
lBodyKey[lBodyIndex++] = lKey
lBodyMap[lKey] = $0
if(++lCount == 2) lCount = 0
lStatus = 3
}
else if(lStatus == 3) {lFooterMap[lFooterIndex++] = $0}
} END {
lKey = lPortIn "_" 0
if((lKey in lBodyMap) == 0) {
lKey = lPortIn "_" 0 ; lListen = "Listen 0.0.0.0:" lPortIn ; lBodyKey[lBodyIndex++] = lKey ; lBodyMap[lKey] = lListen
lKey = lPortIn "_" 1 ; lListen = "Listen [::0]:" lPortIn ; lBodyKey[lBodyIndex++] = lKey ; lBodyMap[lKey] = lListen
}

printf("") > FILENAME
for(lIndex in lHeaderMap) {
lLine = lHeaderMap[lIndex]
printf("%s\n", lLine) >> FILENAME}
for(lIndex in lBodyKey) {
lKey = lBodyKey[lIndex]
lLine = lBodyMap[lKey]
printf("%s\n", lLine) >> FILENAME}
for(lIndex in lFooterMap) {
lLine = lFooterMap[lIndex]
printf("%s\n", lLine) >> FILENAME}
}' $GHTTPD_CONF
}
#================================================
GPhp_listen_remove() {
local lPortIn=$1
if [ "$lPortIn" = "80" ] ; then gz_color s "impossible de supprimer le port 80" yellow fg ; return ; fi
if [ "$lPortIn" = "443" ] ; then gz_color s "impossible de supprimer le port 443" yellow fg ; return ; fi
awk -v lPortIn="$lPortIn" '
@include "gk_string"
BEGIN {
lHeaderIndex = 0
lBodyIndex = 0
lFooterIndex = 0
lStatus = 1
lCount = 0
}{
lLine = $0
if(lLine != "") {
lLine = gk_string("trim", lLine)
if(lLine != "") {
lFirstChar = gk_string("get_c", lLine, 1)
if(lFirstChar != "#") {
lListen = gk_string("split", lLine, " ", 1)
if(lListen == "Listen") {
lPort = gk_string("split", lLine, ":", 0)
lStatus = 2
}}}}
if(lStatus == 1) {lHeaderMap[lHeaderIndex++] = $0}
else if(lStatus == 2) {
lKey = lPort "_" lCount
if(lPort == lPortIn) lIndexMap[lBodyIndex] = lKey
lBodyKey[lBodyIndex++] = lKey
lBodyMap[lKey] = $0
if(++lCount == 2) lCount = 0
lStatus = 3
}
else if(lStatus == 3) {lFooterMap[lFooterIndex++] = $0}
} END {
for(lIndex in lIndexMap) {
lKey = lIndexMap[lIndex]
delete lBodyKey[lIndex]
delete lBodyMap[lKey]
}

printf("") > FILENAME
for(lIndex in lHeaderMap) {
lLine = lHeaderMap[lIndex]
printf("%s\n", lLine) >> FILENAME}
for(lIndex in lBodyKey) {
lKey = lBodyKey[lIndex]
lLine = lBodyMap[lKey]
printf("%s\n", lLine) >> FILENAME}
for(lIndex in lFooterMap) {
lLine = lFooterMap[lIndex]
printf("%s\n", lLine) >> FILENAME}
}' $GHTTPD_CONF
}
#================================================
GPhp_listen_list() {
awk '
@include "gk_string"
BEGIN {lCount = 0}{
lLine = $0
if(lLine == "") next
lLine = gk_string("trim", lLine)
if(lLine == "") next
lFirstChar = gk_string("get_c", lLine, 1)
if(lFirstChar == "#") next
lListen = gk_string("split", lLine, " ", 1)
if(lListen != "Listen") next
lPort = gk_string("split", lLine, ":", 0)
printf("%d : %d : %d : %s\n", NR, lPort, lCount, lLine)
if(++lCount == 2) lCount = 0
} END {}' $GHTTPD_CONF
}
#================================================
GPhp_vhosts_list() {
awk '
@include "gk_string"
BEGIN {
lBodyIndex = 0
lStatus = 1
}{
lLine = $0
if(lLine != "") {lLine = gk_string("trim", lLine) ; if(lLine != "") {lFirstChar = gk_string("get_c", lLine, 1) ; if(lFirstChar != "#") {
lContain = gk_string("contain", lLine, "<VirtualHost.*:.*>")
if(lContain == 1) {lStatus = 2 ; lCount = 0}
if(lStatus == 3) {
lContain = gk_string("contain", lLine, "</VirtualHost>")
if(lContain == 1) {lStatus = 4}
}
}}}}{
if(lStatus == 2) {
lPort = gensub(/<VirtualHost \*:(.*)>/, "\\1", "g", lLine)
lKey = lPort "_" lCount++
lBodyMap[lKey] = $0
lBodyKey[lBodyIndex++] = lKey
lStatus = 3
}
else if(lStatus == 3) {
lKey = lPort "_" lCount++
lBodyMap[lKey] = $0
lBodyKey[lBodyIndex++] = lKey
}
else if(lStatus == 4) {
lKey = lPort "_" lCount++
lBodyMap[lKey] = $0
lBodyKey[lBodyIndex++] = lKey
lStatus = 5
}
} END {
lSep = "#================================================"
printf("%s\n", lSep)
printf("%s\n", "# Virtual Hosts")
for(lIndex in lBodyKey) {
lKey = lBodyKey[lIndex]
lLine = lBodyMap[lKey]
lContain = gk_string("contain", lLine, "<VirtualHost.*>")
if(lContain == 1) printf("%s\n", lSep)
printf("%s\n", lLine)
}
printf("%s\n", lSep)
}' $GHTTPD_VHOSTS_CONF
}
#================================================
GPhp_vhosts_show() {
local lPortIn=$1
awk -v lPortIn="$lPortIn" '
@include "gk_string"
BEGIN {
lBodyIndex = 0
lStatus = 1
}{
lLine = $0
if(lLine != "") {lLine = gk_string("trim", lLine) ; if(lLine != "") {lFirstChar = gk_string("get_c", lLine, 1) ; if(lFirstChar != "#") {
lContain = gk_string("contain", lLine, "<VirtualHost.*:.*>")
if(lContain == 1) {lStatus = 2 ; lCount = 0}
if(lStatus == 3) {
lContain = gk_string("contain", lLine, "</VirtualHost>")
if(lContain == 1) {lStatus = 4}
}
}}}}{
if(lStatus == 2) {
lPort = gensub(/<VirtualHost \*:(.*)>/, "\\1", "g", lLine)
lKey = lPort "_" lCount++
lBodyMap[lKey] = $0
if(lPort == lPortIn) {lIndexMap[lBodyIndex] = lKey}
lBodyKey[lBodyIndex++] = lKey
lStatus = 3
}
else if(lStatus == 3) {
lKey = lPort "_" lCount++
lBodyMap[lKey] = $0
if(lPort == lPortIn) {lIndexMap[lBodyIndex] = lKey}
lBodyKey[lBodyIndex++] = lKey
}
else if(lStatus == 4) {
lKey = lPort "_" lCount++
lBodyMap[lKey] = $0
if(lPort == lPortIn) {lIndexMap[lBodyIndex] = lKey}
lBodyKey[lBodyIndex++] = lKey
lStatus = 5
}
} END {
lSep = "#================================================"
printf("%s\n", lSep)
printf("%s\n", "# Virtual Hosts")
for(lIndex in lIndexMap) {
lKey = lIndexMap[lIndex]
lLine = lBodyMap[lKey]
lContain = gk_string("contain", lLine, "<VirtualHost.*>")
if(lContain == 1) printf("%s\n", lSep)
printf("%s\n", lLine)
}
printf("%s\n", lSep)
}' $GHTTPD_VHOSTS_CONF
}
#================================================
GPhp_vhosts_add() {
local lPortIn=$1
local lWebRoot=$2
if [ "$lPortIn" = "" ] ; then echo $(gz_color s "port ?" yellow fg) ; return ; fi 
if [ "$lWebRoot" = "" ] ; then echo $(gz_color s "web_root ?" yellow fg) ; return ; fi 
awk -v lPortIn="$lPortIn" -v lWebRoot="$lWebRoot" -v GWEB_ROOT="$GWEB_ROOT" '
@include "gk_string"
BEGIN {
lBodyIndex = 0
lStatus = 1
lExist = 0
}{
lLine = $0
if(lLine != "") {lLine = gk_string("trim", lLine) ; if(lLine != "") {lFirstChar = gk_string("get_c", lLine, 1) ; if(lFirstChar != "#") {
lContain = gk_string("contain", lLine, "<VirtualHost.*:.*>")
if(lContain == 1) {lStatus = 2 ; lCount = 0}
if(lStatus == 3) {
lContain = gk_string("contain", lLine, "</VirtualHost>")
if(lContain == 1) {lStatus = 4}
}
}}}
if(lStatus == 2) {
lPort = gensub(/<VirtualHost \*:(.*)>/, "\\1", "g", lLine)
lKey = lPort "_" lCount++
lBodyMap[lKey] = $0
if(lPort == lPortIn) {lIndexMap[lBodyIndex] = lKey ; lExist = 1}
lBodyKey[lBodyIndex++] = lKey
lStatus = 3
}
else if(lStatus == 3) {
lKey = lPort "_" lCount++
lBodyMap[lKey] = $0
if(lPort == lPortIn) {lIndexMap[lBodyIndex] = lKey ; lExist = 1}
lBodyKey[lBodyIndex++] = lKey
}
else if(lStatus == 4) {
lKey = lPort "_" lCount++
lBodyMap[lKey] = $0
if(lPort == lPortIn) {lIndexMap[lBodyIndex] = lKey ; lExist = 1}
lBodyKey[lBodyIndex++] = lKey
lStatus = 5
}
} END {
if(lExist == 1) {
lMessage = "le port " lPortIn " exit deja"
printf("\033[0;33m%s\033[0m\n", lMessage)
}

if(lExist == 0) {
lCount = 0
lWebRoot = GWEB_ROOT "\\" lWebRoot
lLine = "<VirtualHost *:" lPortIn ">" ; lKey = lPortIn "_" lCount++ ; lBodyMap[lKey] = lLine ; lBodyKey[lBodyIndex++] = lKey
lLine = "    ServerName www.readydev.com" ; lKey = lPortIn "_" lCount++ ; lBodyMap[lKey] = lLine ; lBodyKey[lBodyIndex++] = lKey
lLine = "    ServerAdmin gerard.kesse@outlook.fr" ; lKey = lPortIn "_" lCount++ ; lBodyMap[lKey] = lLine ; lBodyKey[lBodyIndex++] = lKey
lLine = "    DocumentRoot \"" lWebRoot "\"" ; lKey = lPortIn "_" lCount++ ; lBodyMap[lKey] = lLine ; lBodyKey[lBodyIndex++] = lKey
lLine = "        <Directory \"" lWebRoot "\">" ; lKey = lPortIn "_" lCount++ ; lBodyMap[lKey] = lLine ; lBodyKey[lBodyIndex++] = lKey
lLine = "            Options All" ; lKey = lPortIn "_" lCount++ ; lBodyMap[lKey] = lLine ; lBodyKey[lBodyIndex++] = lKey
lLine = "            AllowOverride All" ; lKey = lPortIn "_" lCount++ ; lBodyMap[lKey] = lLine ; lBodyKey[lBodyIndex++] = lKey
lLine = "            Order allow,deny" ; lKey = lPortIn "_" lCount++ ; lBodyMap[lKey] = lLine ; lBodyKey[lBodyIndex++] = lKey
lLine = "            allow from all" ; lKey = lPortIn "_" lCount++ ; lBodyMap[lKey] = lLine ; lBodyKey[lBodyIndex++] = lKey
lLine = "            Require all granted" ; lKey = lPortIn "_" lCount++ ; lBodyMap[lKey] = lLine ; lBodyKey[lBodyIndex++] = lKey
lLine = "        </Directory>" ; lKey = lPortIn "_" lCount++ ; lBodyMap[lKey] = lLine ; lBodyKey[lBodyIndex++] = lKey
lLine = "</VirtualHost>" ; lKey = lPortIn "_" lCount++ ; lBodyMap[lKey] = lLine ; lBodyKey[lBodyIndex++] = lKey
}

if(lExist == 0) {
lSep = "#================================================"
printf("") > FILENAME
printf("%s\n", lSep) >> FILENAME
printf("%s\n", "# Virtual Hosts") >> FILENAME
for(lIndex in lBodyKey) {
lKey = lBodyKey[lIndex]
lLine = lBodyMap[lKey]
lContain = gk_string("contain", lLine, "<VirtualHost.*>")
if(lContain == 1) printf("%s\n", lSep) >> FILENAME
printf("%s\n", lLine) >> FILENAME
}
printf("%s\n", lSep) >> FILENAME
}}' $GHTTPD_VHOSTS_CONF
}
#================================================
GPhp_vhosts_remove() {
local lPortIn=$1
if [ "$lPortIn" = "80" ] ; then gz_color s "impossible de supprimer le port 80" yellow fg ; return ; fi
if [ "$lPortIn" = "443" ] ; then gz_color s "impossible de supprimer le port 443" yellow fg ; return ; fi
awk -v lPortIn="$lPortIn" '
@include "gk_string"
BEGIN {
lBodyIndex = 0
lStatus = 1
}{
lLine = $0
if(lLine != "") {lLine = gk_string("trim", lLine) ; if(lLine != "") {lFirstChar = gk_string("get_c", lLine, 1) ; if(lFirstChar != "#") {
lContain = gk_string("contain", lLine, "<VirtualHost.*:.*>")
if(lContain == 1) {lStatus = 2 ; lCount = 0}
if(lStatus == 3) {
lContain = gk_string("contain", lLine, "</VirtualHost>")
if(lContain == 1) {lStatus = 4}
}
}}}}{
if(lStatus == 2) {
lPort = gensub(/<VirtualHost \*:(.*)>/, "\\1", "g", lLine)
lKey = lPort "_" lCount++
lBodyMap[lKey] = $0
if(lPort == lPortIn) {lIndexMap[lBodyIndex] = lKey}
lBodyKey[lBodyIndex++] = lKey
lStatus = 3
}
else if(lStatus == 3) {
lKey = lPort "_" lCount++
lBodyMap[lKey] = $0
if(lPort == lPortIn) {lIndexMap[lBodyIndex] = lKey}
lBodyKey[lBodyIndex++] = lKey
}
else if(lStatus == 4) {
lKey = lPort "_" lCount++
lBodyMap[lKey] = $0
if(lPort == lPortIn) {lIndexMap[lBodyIndex] = lKey}
lBodyKey[lBodyIndex++] = lKey
lStatus = 5
}
} END {
for(lIndex in lIndexMap) {
lKey = lIndexMap[lIndex]
delete lBodyMap[lKey]
delete lBodyKey[lIndex]
}

lSep = "#================================================"
printf("") > FILENAME
printf("%s\n", lSep) >> FILENAME
printf("%s\n", "# Virtual Hosts") >> FILENAME
for(lIndex in lBodyKey) {
lKey = lBodyKey[lIndex]
lLine = lBodyMap[lKey]
lContain = gk_string("contain", lLine, "<VirtualHost.*>")
if(lContain == 1) printf("%s\n", lSep) >> FILENAME
printf("%s\n", lLine) >> FILENAME
}
printf("%s\n", lSep) >> FILENAME
}' $GHTTPD_VHOSTS_CONF
}
#================================================
GPhp_script_exe() {
local lScript=$2
cd $GPHP_SCRIPT
$GPHP_BIN $lScript $3 $4 $5 $6 $7 $8 $9
cd $GPWD
}
#================================================
GPhp_firefox_open_url() {
local lUrl=$1
"$GPHP_FIREFOX" https://readydev.ovh
}
#================================================
GPhp_main "$@"
#================================================
