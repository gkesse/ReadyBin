#!/bin/bash
#================================================
GPWD=$PWD
#================================================
. $GPATH/.config
#================================================
lCheckIn="GPATH" ; if [ "${!lCheckIn}" = "" ] || ! [ -d "${!lCheckIn}" ] ; then echo $(gz_color s "$lCheckIn ?" yellow fg) ; exit ; fi 
lCheckIn="GCYGWIN_SETUP" ; if [ "${!lCheckIn}" = "" ] || ! [ -d "${!lCheckIn}" ] ; then echo $(gz_color s "$lCheckIn ?" yellow fg) ; exit ; fi 
#================================================
lSetup=$(uname -a | awk '{lSetup="setup-x86.exe" ; if($6 == "x86_64") lSetup="setup-x86_64.exe" ; print lSetup}')
GCYGWIN_SETUP=$GCYGWIN_SETUP/$lSetup
#================================================
GCygwin_main() {
lArgSize="$#"
if [ "$lArgSize" = "0" ] ; then GCygwin_help "$@"
else GCygwin_process "$@" ; fi
}
#================================================
GCygwin_help() {
lScript=$(gz_string filename "$0")
GSCRIPT="\t\033[0;35m${lScript}\033[0m"
GCOMMENT="\033[0;33m%s\033[0m"
GHELP="$GSCRIPT : $GCOMMENT\n"
GREQUEST="\033[36m%s\033[0m"
GPROCESS="$GSCRIPT $GREQUEST : $GCOMMENT\n"
printf "\n"
printf "%s\n" "Description:"
printf "\t%s\n" "Operations sur les commandes cygwin."
printf "\n"
printf "%s\n" "Utilisation:"
printf "$GHELP" "afficher aide"
printf "$GPROCESS" "c <path_in>" "convertir chemin vers cygwin"
printf "$GPROCESS" "cg" "installer cyg-get"
printf "$GPROCESS" "w <path_in>" "convertir chemin vers WINDOWS"
printf "$GPROCESS" "s" "ouvrir manager"
printf "$GPROCESS" "i" "installer package"
printf "$GPROCESS" "r" "supprimer package"
printf "$GPROCESS" "u" "mettre a jour cygwin"
printf "\n"
}
#================================================
GCygwin_process() {
lArgSize="$#"
lArgCount=1
lRunFlag=0
while [ 1 ] ; do
if [ "$lArgCount" -gt "$lArgSize" ] ; then break ; fi
lKey=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
# w
if [ "$lKey" = "w" ] ; then 
lPath=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
GCygwin_to_windows "$lPath" ; lRunFlag=1
# c
elif [ "$lKey" = "c" ] ; then 
lPath=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
GCygwin_to_cygwin "$lPath" ; lRunFlag=1
# cg
elif [ "$lKey" = "cg" ] ; then 
GCygwin_cyg_get ; lRunFlag=1
# s
elif [ "$lKey" = "s" ] ; then 
GCygwin_setup ; lRunFlag=1
# i
elif [ "$lKey" = "i" ] ; then 
lPackage=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
GCygwin_install "$lPackage" ; lRunFlag=1
# r
elif [ "$lKey" = "r" ] ; then 
lPackage=${!lArgCount} ; lArgCount=$(gz_string math "$lArgCount + 1")
GCygwin_remove "$lPackage" ; lRunFlag=1
# u
elif [ "$lKey" = "u" ] ; then 
GCygwin_update ; lRunFlag=1
#
fi
done
if [ "$lRunFlag" = "0" ] ; then GCygwin_help ; fi
}
#================================================
GCygwin_to_windows() {
local lPath=$1
lWindows=$(cygpath -w "$lPath");
echo $lWindows
}
#================================================
GCygwin_to_cygwin() {
local lPath=$1
lCygwin=$(cygpath -u "$lPath");
echo $lCygwin
}
#================================================
GCygwin_setup() {
$GCYGWIN_SETUP --no-admin
}
#================================================
GCygwin_install() {
local lPackage=$1
if [ "$lPackage" = "" ] ; then echo $(gz_color s "package ?" yellow fg) ; return ; fi 
$GCYGWIN_SETUP --no-admin -q -P "$lPackage"
}
#================================================
GCygwin_remove() {
local lPackage=$1
if [ "$lPackage" = "" ] ; then echo $(gz_color s "package ?" yellow fg) ; return ; fi 
$GCYGWIN_SETUP --no-admin -q -x "$lPackage"
}
#================================================
GCygwin_update() {
$GCYGWIN_SETUP --no-admin -q -g
}
#================================================
GCygwin_cyg_get() {
lUrl="https://gitlab.com/cogline.v3/cygwin/raw/master/cyg-get?inline=false"
wget -O /usr/bin/cyg-get $lUrl
}
#================================================
GCygwin_main "$@"
#================================================
