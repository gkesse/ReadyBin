#!/bin/awk -f
#================================================
@include "gk_help"
#================================================
function gk_string(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9,  lKey, lString, lPos, lSep) {
    i = 0 ; lArgMap[i++] = p0 ; lArgMap[i++] = p1 ; lArgMap[i++] = p2 ; lArgMap[i++] = p3 ; lArgMap[i++] = p4 ; lArgMap[i++] = p5 ; lArgMap[i++] = p6 ; lArgMap[i++] = p7 ; lArgMap[i++] = p8 ; lArgMap[i++] = p9
    lLength = i
    for(i = 0; i < lLength; ) {
        lKey = lArgMap[i++]
        if(lKey == "") break
        # test
        if(lKey == "test") {
            GString_test()
        }
        # help
        if(lKey == "help") {
            GString_help()
        }
        # trim
        else if(lKey == "trim") {
            lString = lArgMap[i++]
            return GString_trim(lString)
        }
        # get_c
        else if(lKey == "get_c") {
            lString = lArgMap[i++]
            lPos = lArgMap[i++]
            return GString_get_char(lString, lPos)
        }
        # split
        else if(lKey == "split") {
            lString = lArgMap[i++]
            lSep = lArgMap[i++]
            lPos = lArgMap[i++]
            return GString_split(lString, lSep, lPos)
        }
        # split_c
        else if(lKey == "split_c") {
            lString = lArgMap[i++]
            lSep = lArgMap[i++]
            return GString_split_count(lString, lSep)
        }
        # to_u
        else if(lKey == "to_u") {
            lString = lArgMap[i++]
            return GString_to_upper(lString)
        }
        # to_l
        else if(lKey == "to_l") {
            lString = lArgMap[i++]
            return GString_to_lower(lString)
        }
        # to_n
        else if(lKey == "to_n") {
            lString = lArgMap[i++]
            return GString_to_number(lString)
        }
        # index
        else if(lKey == "index") {
            lString = lArgMap[i++]
            lSub = lArgMap[i++]
            return GString_index(lString, lSub)
        }
        # size
        else if(lKey == "size") {
            lString = lArgMap[i++]
            return GString_size(lString)
        }
        # sub_l
        else if(lKey == "sub_l") {
            lString = lArgMap[i++]
            lPos = lArgMap[i++]
            lSize = lArgMap[i++]
            return GString_substr_left(lString, lPos, lSize)
        }
        # sub_r
        else if(lKey == "sub_r") {
            lString = lArgMap[i++]
            lPos = lArgMap[i++]
            lSize = lArgMap[i++]
            return GString_substr_right(lString, lPos, lSize)
        }
        # sort
        else if(lKey == "sort") {
            lString = lArgMap[i++]
            lSepIn = lArgMap[i++]
            lSepOut = lArgMap[i++]
            return GString_sort(lString, lSepIn, lSepOut)
        }
        # sort_i
        else if(lKey == "sort_i") {
            lString = lArgMap[i++]
            lSepIn = lArgMap[i++]
            lSepMap = lArgMap[i++]
            lSepOut = lArgMap[i++]
            return GString_sort_map(lString, lSepIn, lSepMap, lSepOut)
        }
        # contain
        else if(lKey == "contain") {
            lString = lArgMap[i++]
            lPattern = lArgMap[i++]
            return GString_contain(lString, lPattern)
        }
        # concat
        else if(lKey == "concat") {
            return GString_to_lower(i, lArgMap)
        }
        # replace
        else if(lKey == "replace") {
            lString = lArgMap[i++]
            lPattern = lArgMap[i++]
            lReplace = lArgMap[i++]
            return GString_replace(lString, lPattern, lReplace)
        }
    }
}
#================================================
function GString_test() {
    printf("trim: [%s]\n", "  bonjour tout le monde   ")
    printf("trim: [%s]\n", GString_trim("  bonjour tout le monde   "))
    printf("get_char: [%s]\n", GString_get_char("bonjour tout le monde", 1))
    printf("get_char: [%s]\n", GString_get_char("bonjour tout le monde", 2))
    printf("index: [%d]\n", GString_index("bonjour tout le monde", "tout"))
    printf("size: [%d]\n", GString_size("tout"))
    printf("substr_left: [%s]\n", GString_substr_left("bonjour tout le monde", 9, 4))
    printf("substr_right: [%s]\n", GString_substr_right("bonjour tout le monde", 9, 4))
    printf("substr_right: [%s]\n", GString_substr_right("bonjour tout le monde", 5, 5))
    printf("to_upper: [%s]\n", GString_to_upper("bonjour tout le monde"))
    printf("to_lower: [%s]\n", GString_to_lower("BONJOUR TOUT LE MONDE"))
    printf("split_count: [%d]\n", GString_split_count("bonjour tout le monde", " "))
    printf("split: [%s]\n", GString_split("bonjour tout le monde", " ", 1))
    printf("split: [%s]\n", GString_split("bonjour tout le monde", " ", 2))
    printf("sort: [%s]\n", GString_sort("bonjour tout le monde", " ", ";"))
    printf("sort_map: [%s]\n", GString_sort_map("nom=KESSE;prenom=Gerard;email=gerard.kesse@readydev.com", ";", "="))
    printf("contain: [%s]\n", GString_contain("bonjour tout le monde", "tout"))
    printf("contain: [%s]\n", GString_contain("bonjour tout le monde", "Tout"))
    printf("to_number: [%d]\n", GString_to_number("123"))
    printf("to_number: [%d]\n", GString_to_number("0123"))
    printf("to_number: [%d]\n", GString_to_number("0x123"))
}
#================================================
function GString_help() {
    lScript="gk_string"
    printf("\n")
    printf("%s\n", "Description:")
    printf("\t%s\n", "Operations sur les commandes awk.")
    printf("\n")
    printf("%s\n", "Utilisation:")
    gk_help("u", lScript, "help", "afficher aide")
    gk_help("u", lScript, "test", "tester module")
    gk_help("u", lScript, "trim <string_in>", "enlever espace chaine")
    gk_help("u", lScript, "split <string_in> <sep_in> <pos_in>", "decouper chaine")
    gk_help("u", lScript, "split_c <string_in> <sep_in>", "compter decoupe chaine")
    gk_help("u", lScript, "to_u <string_in>", "convertir chaine majuscule")
    gk_help("u", lScript, "to_l <string_in>", "convertir chaine minuscule")
    gk_help("u", lScript, "to_n <string_in>", "convertir chaine nombre")
    gk_help("u", lScript, "get_c <string_in> <pos_in>", "lire caractere chaine")
    gk_help("u", lScript, "sub_l <string_in> <pos_in> <size_in>", "lire sous-chaine gauche")
    gk_help("u", lScript, "sub_r <string_in> <pos_in> <size_in>", "lire sous-chaine droite")
    gk_help("u", lScript, "srot <string_in> <sep_in> <sep_out>", "trier liste chaines")
    gk_help("u", lScript, "srot_i <string_in> <sep_in> <sep_map_in> <sep_out>", "trier index map chaines")
    gk_help("u", lScript, "contain <string_in>", "contenir chaine")
    gk_help("u", lScript, "concat <string_in>", "concatener chaines")
    gk_help("u", lScript, "replace <string_in> <pattern_in> <replace_in>", "remplacer chaine")
    printf("\n")
}
#================================================
function GString_trim_left(str) {
    sub(/^[ \t\r\n]+/, "", str) ; 
    return str
}
#================================================
function GString_trim_right(str) {
    sub(/[ \t\r\n]+$/, "", str) ; 
    return str
}
#================================================
function GString_trim(str) {
    return GString_trim_right(GString_trim_left(str))
}
#================================================
function GString_get_char(str, pos) {
    return substr(str, pos, 1)
}
#================================================
function GString_split(str, sep, pos) {
    lSize = split(str, lMap, sep)
    if(pos == 0) pos = lSize
    return GString_trim(lMap[pos])
}
#================================================
function GString_split_count(str, sep) {
    lCount = split(str, lMap, sep)
    return lCount
}
#================================================
function GString_to_upper(str) {
    return toupper(str)
}
#================================================
function GString_to_lower(str) {
    return tolower(str)
}
#================================================
function GString_index(str, pattern) {
    return index(str, pattern)
}
#================================================
function GString_size(str) {
    return length(str)
}
#================================================
function GString_substr_left(str, pos, size) {
    return substr(str, pos, size)
}
#================================================
function GString_substr_right(str, pos, size) {
    lSize = length(str)
    lPos = lSize - size + 1;
    return substr(str, lPos, size)
}
#================================================
function GString_sort(str, sepIn, sepOut) {
    if(sepOut == "") sepOut = sepIn
    split(str, lMap, sepIn)
    asort(lMap)
    lSort = ""
    lFlag = 0
    for(i in lMap) {
        if(lFlag == 1) lSort = lSort sepOut
        lFlag = 1
        lSort = lSort lMap[i]
    }
    return lSort
}
#================================================
function GString_sort_map(str, sepIn, sepMap, sepOut) {
    if(sepOut == "") sepOut = sepIn 
    split(str, lMap, sepIn)
    for(i in lMap) {
        lItem = lMap[i]
        split(lItem, lData, sepMap)
        lKey = lData[1]
        lValue = lData[2]
        lTable[lKey] = lValue
    }
    asorti(lTable, lArr)
    lSort = ""
    lFlag = 0
    for(i in lArr) {
        lKey = lArr[i]
        lValue = lTable[lKey]
        if(lFlag == 1) lSort = lSort sepOut
        lFlag = 1
        lSort = lSort lKey sepMap lValue
    }
    return lSort
}
#================================================
function GString_contain(str, pattern) {
    IGNORECASE = 1
    lContain = match(str, pattern)
    IGNORECASE = 0
    if(lContain == 0) return 0
    return 1
}
#================================================
function GString_to_number(str) {
    return strtonum(str)
}
#================================================
function GString_concat(i, argMap) {
    for(; i < lLength; ) {
        lString = lArgMap[i++]
        lConcat = lConcat lString
    }
    return lConcat
}
#================================================
function GString_replace(str, pattern, replace) {
    return gensub(pattern, replace, "g", str)
}
#================================================
